using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace SourceGenerator
{
    [Generator]
    internal class IncreasementSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var compilation = context.CompilationProvider;
            context.RegisterSourceOutput(compilation, OnCompliationSourceOutput);
        }

        private void OnCompliationSourceOutput(SourceProductionContext context, Compilation compilation)
        {
            var mainMethod = compilation.GetEntryPoint(context.CancellationToken);

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}'"");
    }}
}}
";
            var typeName = mainMethod.ContainingType.Name;

            string code = $@"// <auto-generated/>
using System;

namespace SourceGenerator
{{
    public static class Test
    {{
        static void HelloFromAAA(string name) =>
            Console.WriteLine(""Generator says: Hi from Test"");
    }}
}}
";
            Debug.WriteLine("sssss==========");
            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
            context.AddSource($"a.cs", code);
        }
    }
}
